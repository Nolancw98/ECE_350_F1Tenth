<?xml version="1.0"?>
<launch>
  <!-- Listen to messages from joysicks -->
  <node pkg="joy" name="joy_node" type="joy_node"/>

  <!-- Launch a map from the maps folder-->
  <arg name="map" default="$(find f1tenth_simulator)/maps/gap1.yaml"/>
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map)"/>

  <!-- Launch the racecar model -->
  <include file="$(find f1tenth_simulator)/launch/racecar_model.launch"/>

  <!-- Begin the simulator with the parameters from params.yaml -->
  <node pkg="f1tenth_simulator" name="f1tenth_simulator" type="simulator" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- Launch the mux node with the parameters from params.yaml -->
  <node pkg="f1tenth_simulator" name="mux_controller" type="mux" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- Launch the behavior controller node with the parameters from params.yaml -->
  <node pkg="f1tenth_simulator" name="behavior_controller" type="behavior_controller" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- Launch the Random Walker Node -->
  <node pkg="f1tenth_simulator" name="random_walker" type="random_walk" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- Launch the Keyboard Node -->
  <node pkg="f1tenth_simulator" name="keyboard" type="keyboard" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- ***Put launch command for new planner here:-->
  <!-- Launch the New Planner Node -->

  <arg name="scan_topic" default="/scan"/>
  <!-- <arg name="odometry_topic" default="/vesc/odom"/> -->
  <arg name="odometry_topic" default="/odom"/>
  <arg name="angle_step" default="18"/>
  <arg name="max_particles" default="4000"/>
  <arg name="squash_factor" default="2.2"/>
  <arg name="viz" default="1"/>
  
  <node pkg="rrt" name="rrt" type="team8_rrt.py" output="screen">
	<param name="scan_topic" value="$(arg scan_topic)"/>
	<param name="odometry_topic" value="$(arg odometry_topic)"/>
	<!-- range data is downsampled by this factor -->
	<param name="angle_step" value="$(arg angle_step)"/>
	<param name="max_particles" value="$(arg max_particles)"/>
	<param name="max_viz_particles" value="60"/>
	<param name="range_method" value="pcddt"/>
	<!-- <param name="range_method" value="rmgpu"/> -->
	<param name="squash_factor" value="$(arg squash_factor)"/>
	<param name="theta_discretization" value="112"/>
	<!-- max sensor range in meters -->
	<param name="max_range" value="10"/> 
	<param name="viz" value="$(arg viz)"/> 
	<param name="fine_timing" value="0"/> 
	<param name="publish_odom" value="1"/> 

	<!-- sensor model constants, see sensor model section in the Lab5 guide document -->
	<param name="z_short" value="0.01"/> 
	<param name="z_max" value="0.07"/> 
	<param name="z_rand" value="0.12"/> 
	<param name="z_hit" value="0.75"/> 
	<param name="sigma_hit" value="8.0"/> 

	<!-- motion model dispersion constant, this could be improved. Large values will spread out
	     the particle distribution more. Too much and it is overly computational to represent the
	     true prob. dist, too little and the particle filter can diverge at high speeds where the
	     ackermann motion model is inaccurate
	-->
	<param name="motion_dispersion_x" value="0.05"/> 
	<param name="motion_dispersion_y" value="0.025"/> 
	<param name="motion_dispersion_theta" value="0.25"/> 

	<!-- this option switches between different sensor model variants, high values are more
	     optimized. range_variant 3 does not work for rmgpu, but variant 2 is very good. variant
	     4 only works with cddt or pcddt range_method options
	-->
	<param name="rangelib_variant" value="2"/>
  </node>

  
  <!-- Launch RVIZ -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find f1tenth_simulator)/launch/simulator.rviz" output="screen"/>
</launch>
